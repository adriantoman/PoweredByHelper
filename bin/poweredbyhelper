#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'bundler/setup'
require 'gooddata'
require 'logger'
require 'pry'
require 'gli'
require 'poweredbyhelper'
require 'colorize'

include GLI::App

program_desc 'GoodData PowerBy provisioning app'


pre do |global_options,command,options,args|
  next true if command.nil?
  @@log = Logger.new(STDOUT)
  @@log.level = Logger::INFO
  if File.exists?('running.pid')
    puts "Another process is running"
    exit
  end
  FileUtils.touch('running.pid')
end

post do |global_options,command,options,args|
  FileUtils.rm('running.pid')
end


command :provision do |c|

  c.desc 'Do only test run with debug output'
  c.switch [:t,:test]

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_persistent_storage
    helper.project_provisioning
    helper.etl_provisioning
    helper.user_synchronization

  end
end

command :delete_all do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_persistent_storage
    helper.delete_all_projects
  end


end


command :delete_users do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login

    response = GoodData.get("gdc/account/domains/gooddata-adrian-toman/users")
    response["accountSettings"]["items"].each do |user|
      if (user["accountSetting"]["login"] != "adrian.toman+deploy_test@gooddata.com")
        GoodData.delete(user["accountSetting"]["links"]["self"])
      end
    end
  end


end


command :dry_run do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_persistent_storage
    helper.init_user_storage


    puts "------- Project provisioning part -------".colorize( :light_blue )
    PowerByHelper::Persistent.project_data.each do |p|
      message =  "#{p.project_name} - ID: #{p.ident} - PID: #{p.project_pid} STATUS: #{p.status} #{p.disabled_at} (#{PowerByHelper::Settings.connection_server + "/#s=/gdc/projects/#{p.project_pid}"})"
      if (p.status == PowerByHelper::ProjectData.OK)
        puts message.colorize( :light_green )
      else
        puts message.colorize( :red )
      end
    end
    puts "------- Project provisioning part -------\n".colorize( :light_blue )

    puts "------- ETL provisioning part -------".colorize( :light_blue )
    PowerByHelper::Persistent.etl_data.each do |etl|
      puts "Project PID: #{etl.project_pid} Process ID: #{etl.process_id} - Schedule ID: #{etl.schedule_id}".colorize( :light_green )
    end
    puts "------- ETL provisioning part -------\n".colorize( :light_blue )

    puts "------- USER provisioning part - domain-------".colorize( :light_blue )
    PowerByHelper::Persistent.user_data.sort{|a,b| b.admin == true ? 1 : 0  }.each do |user|
      message = "Login: #{user.login} Name: #{user.first_name} #{user.last_name} Admin: #{user.admin ? "YES":"NO"} - STATUS: #{user.status}"
      if (user.status == PowerByHelper::UserData.CREATED)
        puts message.colorize( :light_green )
      else
        puts message.colorize( :red )
      end
    end

    puts "------- USER provisioning part - project - user mapping -------\n".colorize( :light_blue )

    PowerByHelper::Persistent.project_data.each do |p|
      puts "Users in project: #{p.project_name} - ID: #{p.ident} - PID: #{p.project_pid}".colorize( :green )
      users = PowerByHelper::Persistent.user_project_data.find_all{|u| u.project_pid == p.project_pid}
      users.each do |user|
        message = "User: #{user.login} - Status: #{user.status} GD Role: #{user.role} Organization Role: #{user.internal_role} Notification: #{user.notification_send}"
        if (user.status == PowerByHelper::UserProjectData.OK)
            puts message.colorize( :light_green )
        elsif (user.status == PowerByHelper::UserProjectData.DISABLED)
            puts message.colorize( :gray )
        else
            puts message.colorize( :red )
        end
      end

    end
    puts "------- USER provisioning part - project -------".colorize(:light_blue )





  end


end










command :update_schedules do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_persistent_storage
    helper.update_schedules
  end


end







on_error do |exception|
  FileUtils.rm('running.pid')
  pp exception.backtrace
  if exception.is_a?(SystemExit) && exception.status == 0
    false
  else
    pp exception.inspect
    false
  end
end



exit run(ARGV)


