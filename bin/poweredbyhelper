#!/usr/bin/env ruby

# Copyright (c) 2009, GoodData Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
# Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
# Neither the name of the GoodData Corporation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                                                                     

# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'bundler/setup'
require 'gooddata'
require 'logger'
require 'pry'
require 'gli'
require 'poweredbyhelper'
require 'colorize'
require "net/dav"
require "curb"
require "zip/zip"
require "pony"
require "thread"



include GLI::App

program_desc 'GoodData PowerBy provisioning app'

desc "Output to STDOUT"
switch [:d,:debug]

desc "Log level from API - DEBUG"
switch [:v,:verbose]



pre do |global_options,command,options,args|
  next true if command.nil?
  @running = false
  @not_delete = false
  @@log = Logger.new("log/provision.log",'daily') if !global_options[:debug]
  @@log = Logger.new(STDOUT) if global_options[:debug]
  @@log.level = Logger::INFO
  @@api_debug = global_options[:verbose] || false


  if File.exists?('running.pid')
    @running = true
    @not_delete = true
    exit_now! "Another process is running"
  end
  FileUtils.touch('running.pid')
end

post do |global_options,command,options,args|
  FileUtils.rm_f('running.pid') if !@running
end


command :provision do |c|

  c.desc 'Do only test run with debug output'
  c.switch [:t,:test]

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.migration
    helper.create_backup
    helper.gooddata_login(@@api_debug)
    helper.check_directories_on_webdav
    helper.init_persistent_storage
    helper.project_provisioning
    helper.move_remote_project_files
    helper.init_etl_persistent_storage
    helper.etl_provisioning
    helper.user_synchronization
    helper.move_remote_user_files
    helper.move_remote_mufs_files
  end
end

command :delete_all do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'For deletion'
  c.switch [:f,:force]


  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login(@@api_debug)
    helper.init_persistent_storage
    helper.init_etl_persistent_storage
    helper.delete_all_projects(options[:force] || false)
  end


end


command :delete_users do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login(@@api_debug)

    response = GoodData.get("gdc/account/domains/gooddata-adrian-toman/users")
    response["accountSettings"]["items"].each do |user|
      if (user["accountSetting"]["login"] != "adrian.toman+deploy_test@gooddata.com")
        GoodData.delete(user["accountSetting"]["links"]["self"])
      end
    end
  end


end


command :dry_run do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'Do only test run with debug output'
  c.switch [:t,:test]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.migration
    helper.gooddata_login(@@api_debug)
    helper.init_persistent_storage
    helper.init_user_storage
    helper.execute_muf_compare



    puts "------- Project provisioning part -------".colorize( :light_blue )
    PowerByHelper::Persistent.project_data.each do |p|
      message =  "#{p.project_name} - ID: #{p.ident} - PID: #{p.project_pid} STATUS: #{p.status} #{p.disabled_at} (#{PowerByHelper::Settings.connection_server + "/#s=/gdc/projects/#{p.project_pid}"})"
      if (p.status == PowerByHelper::ProjectData.OK)
        puts message.colorize( :light_green )
      else
        puts message.colorize( :red )
      end
    end
    puts "------- Project provisioning part -------\n".colorize( :light_blue )

    helper.init_etl_persistent_storage
    puts "------- ETL provisioning part - processes -------".colorize( :light_blue )
    if (!PowerByHelper::Persistent.etl_data.nil?)
      PowerByHelper::Persistent.etl_data.each do |etl|
        status = ""
        if (etl.status == PowerByHelper::EtlData.NOTIFICATION_CREATED)
          status = "NOTIFICATION_CREATED"
        elsif (etl.status == PowerByHelper::EtlData.NEW)
          status = "NEW"
        elsif (etl.status == PowerByHelper::EtlData.PROCESS_CREATED)
          status = "PROCESS_CREATED"
        end
        message = "Project PID: #{etl.project_pid} Process ID: #{etl.process_id} - Status: #{status}"
        if (etl.status == PowerByHelper::EtlData.NOTIFICATION_CREATED)
          puts message.colorize( :light_green )
        else
          puts message.colorize( :red )
        end
      end
    end
    puts "------- ETL provisioning part - processes-------\n".colorize( :light_blue )

    puts "------- ETL provisioning part - schedules -------".colorize( :light_blue )
    if (!PowerByHelper::Persistent.schedule_data.nil?)
      PowerByHelper::Persistent.schedule_data.each do |schedule|
        if (schedule.status == PowerByHelper::ScheduleData.SCHEDULE_CREATED)
          status = "SCHEDULE_CREATED"
        else
          status = "NEW"
        end
        message =  "Project PID: #{schedule.project_pid} - Schedule Ident - #{schedule.ident} Schedule ID: #{schedule.schedule_id} Status: #{status}"
        if (schedule.status == PowerByHelper::ScheduleData.SCHEDULE_CREATED)
          puts message.colorize( :light_green )
        else
          puts message.colorize( :red )
        end
      end
    end
    puts "------- ETL provisioning part - schedules-------\n".colorize( :light_blue )


    if (!PowerByHelper::Persistent.user_data.nil?)
      puts "------- USER provisioning part - domain-------".colorize( :light_blue )
      PowerByHelper::Persistent.user_data.sort{|a,b| b.admin == true ? 1 : 0  }.each do |user|
        message = "Login: #{user.login} Name: #{user.first_name} #{user.last_name} Admin: #{user.admin ? "YES":"NO"} - STATUS: #{user.status}"
        if (user.status == PowerByHelper::UserData.CREATED)
          puts message.colorize( :light_green )
        elsif (user.status == PowerByHelper::UserData.DISABLED)
          puts message.colorize( :black )
        else
          puts message.colorize( :red )
        end
      end

      puts "------- USER provisioning part - project - user mapping -------\n".colorize( :light_blue )

      PowerByHelper::Persistent.project_data.each do |p|
        puts "Users in project: #{p.project_name} - ID: #{p.ident} - PID: #{p.project_pid}".colorize( :green )
        users = PowerByHelper::Persistent.user_project_data[p.project_pid]
        users.each_pair do |k,user|
          message = "User: #{user.login} - Status: #{user.status} GD Role: #{user.role} Organization Role: #{user.internal_role} Notification Enabled: #{user.notification}  Notification Send: #{user.notification_send}"
          if (user.status == PowerByHelper::UserProjectData.OK)
              puts message.colorize( :light_green )
          elsif (user.status == PowerByHelper::UserProjectData.DISABLED)
              puts message.colorize( :gray )
          else
              puts message.colorize( :red )
          end
        end

      end
      puts "------- USER provisioning part - project -------".colorize(:light_blue )
    end

    # MUF Sections

    puts "------- MUF provisioning part -------\n".colorize( :light_blue )
    if (!PowerByHelper::Persistent.muf_projects.nil?)
      PowerByHelper::Persistent.muf_projects.each do |muf_project|
        puts "Mufs in project: #{muf_project.pid} - ID: #{muf_project.ident}".colorize( :green )
        muf_project.muf_logins.each do |muf_login|
          if (muf_login.ok?)
              puts "  Muf for login #{muf_login.login} was not changed.".colorize( :green )
          elsif (muf_login.create?)
             puts "  Muf for login #{muf_login.login} is new.".colorize(:light_red)
             muf_login.mufs.each do |muf|
              puts "    Muf for attribute #{muf.attribute} has this settings #{muf.new_values.values.join(",")}".colorize(:light_red)
             end
          elsif (muf_login.to_delete)
            puts "  Muf for login #{muf_login.login} will be deleted.".colorize(:red)
          elsif (muf_login.changed?)
            puts "  Muf for login #{muf_login.login} will be changed.".colorize(:light_red)
            muf_login.mufs.each do |muf|
              if (!muf.same?)
                muf_values = muf.values
                muf_values_new = muf.new_values
                muf_values = muf_values.values.sort
                muf_values_new = muf_values_new.values.sort

                added_values = muf_values_new - muf_values
                removed_values = muf_values - muf_values_new
                same_values = muf_values & muf_values_new
                puts "    Muf for attribute #{muf.attribute} (#{muf.type}) has this values:".colorize(:light_red)
                puts "       Same values: #{same_values.join(",")}".colorize(:light_red) if !same_values.empty?
                puts "       Added values: #{added_values.join(",")}".colorize(:red) if !added_values.empty?
                puts "       Removed values: #{removed_values.join(",")}".colorize(:red) if !removed_values.empty?
              end
            end
          end

        end
      end
    end

    puts "------- MUF provisioning part -------\n".colorize( :light_blue )



  end


end


command :update_schedules do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'Do only test run with debug output'
  c.switch [:t,:test]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.migration
    helper.gooddata_login(@@api_debug)
    helper.init_persistent_storage
    helper.init_etl_persistent_storage

    helper.update_schedules
  end


end

command :update_processes do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login(@@api_debug)
    helper.init_persistent_storage
    helper.init_etl_persistent_storage
    helper.update_processes
  end


end


command :execute_maql do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'MAQL file path'
  c.flag [:maql]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.migration
    helper.gooddata_login(@@api_debug)
    helper.init_maintenance_storage
    helper.execute_maql(options[:maql])
  end


end


command :execute_partial_metadata do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'Partial metadata export token'
  c.flag [:token]

  c.action do |global_options,options,args|
    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.migration
    helper.gooddata_login(@@api_debug)
    helper.init_maintenance_storage
    helper.execute_partial_metadata(options[:token])
  end
end


command :execute_key_value_set do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'Key'
  c.flag [:key]

  c.desc 'Value'
  c.flag [:value]


  c.action do |global_options,options,args|
    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.migration
    helper.gooddata_login(@@api_debug)
    helper.init_maintenance_storage
    helper.create_update_key_value(options[:key],options[:value])
  end
end



command :execute_code do |c|
  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'Code file'
  c.flag [:code_file]


  c.action do |global_options,options,args|
    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    fail "The code file don't exist" unless (File.exist?(options[:code_file]))
    code = File.read(options[:code_file])
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login(@@api_debug)
    helper.init_persistent_storage
    helper.init_etl_persistent_storage
    helper.init_user_storage
    helper.run_custom_code(code)

  end




end


command :test do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'Partial metadata export token'
  c.flag [:token]

  c.action do |global_options,options,args|
    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login(@@api_debug)
    helper.test

  end


end



on_error do |exception|
  @@log ||= Logger.new(STDOUT)
  @@log.level = Logger::INFO
  @@log.error exception.backtrace
  @@log.error exception.message
  FileUtils.rm_f('running.pid') if !@not_delete
  if (!$monitoring_mail_target.nil? and !$monitoring_mail_source.nil?)
    @@log.error "Sending mail"
    Pony.mail(:to => $monitoring_mail_target,:from => $monitoring_mail_source, :subject => "PBH Error", :body => "Error: #{exception.backtrace}" )
  end
  if exception.is_a?(SystemExit) && exception.status == 0
    @@log.error exception.inspect
    false
  else
    @@log.error exception.inspect
    false
  end
end

exit run(ARGV)


