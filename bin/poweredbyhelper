#!/usr/bin/env ruby

# Copyright (c) 2009, GoodData Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
# Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
# Neither the name of the GoodData Corporation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                                                                     

# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'bundler/setup'
require 'gooddata'
require 'logger'
require 'pry'
require 'gli'
require 'poweredbyhelper'
require 'colorize'
require "net/dav"
require "curb"
require "zip/zip"



include GLI::App

program_desc 'GoodData PowerBy provisioning app'

desc "Output to STDOUT"
switch [:d,:debug]

pre do |global_options,command,options,args|
  next true if command.nil?
  @running = false
  @@log = Logger.new("log/provision.log",'daily') if !global_options[:debug]
  @@log = Logger.new(STDOUT) if global_options[:debug]
  @@log.level = Logger::INFO

  if File.exists?('running.pid')
    @running = true
    puts "Another process is running"
    exit
  end
  FileUtils.touch('running.pid')
end

post do |global_options,command,options,args|
  FileUtils.rm_f('running.pid') if !@running
end


command :provision do |c|

  c.desc 'Do only test run with debug output'
  c.switch [:t,:test]

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_persistent_storage
    helper.project_provisioning
    helper.move_remote_project_files
    helper.etl_provisioning
    helper.user_synchronization
    helper.move_remote_user_files

  end
end

command :delete_all do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'For deletion'
  c.switch [:f,:force]


  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_persistent_storage
    helper.delete_all_projects(options[:force] || false)
  end


end


command :delete_users do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login

    response = GoodData.get("gdc/account/domains/gooddata-adrian-toman/users")
    response["accountSettings"]["items"].each do |user|
      if (user["accountSetting"]["login"] != "adrian.toman+deploy_test@gooddata.com")
        GoodData.delete(user["accountSetting"]["links"]["self"])
      end
    end
  end


end


command :dry_run do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_persistent_storage
    helper.init_user_storage


    puts "------- Project provisioning part -------".colorize( :light_blue )
    PowerByHelper::Persistent.project_data.each do |p|
      message =  "#{p.project_name} - ID: #{p.ident} - PID: #{p.project_pid} STATUS: #{p.status} #{p.disabled_at} (#{PowerByHelper::Settings.connection_server + "/#s=/gdc/projects/#{p.project_pid}"})"
      if (p.status == PowerByHelper::ProjectData.OK)
        puts message.colorize( :light_green )
      else
        puts message.colorize( :red )
      end
    end
    puts "------- Project provisioning part -------\n".colorize( :light_blue )

    puts "------- ETL provisioning part -------".colorize( :light_blue )
    PowerByHelper::Persistent.etl_data.each do |etl|
      puts "Project PID: #{etl.project_pid} Process ID: #{etl.process_id} - Schedule ID: #{etl.schedule_id}".colorize( :light_green )
    end
    puts "------- ETL provisioning part -------\n".colorize( :light_blue )
    if (!PowerByHelper::Persistent.user_data.nil?)
      puts "------- USER provisioning part - domain-------".colorize( :light_blue )
      PowerByHelper::Persistent.user_data.sort{|a,b| b.admin == true ? 1 : 0  }.each do |user|
        message = "Login: #{user.login} Name: #{user.first_name} #{user.last_name} Admin: #{user.admin ? "YES":"NO"} - STATUS: #{user.status}"
        if (user.status == PowerByHelper::UserData.CREATED)
          puts message.colorize( :light_green )
        else
          puts message.colorize( :red )
        end
      end

      puts "------- USER provisioning part - project - user mapping -------\n".colorize( :light_blue )

      PowerByHelper::Persistent.project_data.each do |p|
        puts "Users in project: #{p.project_name} - ID: #{p.ident} - PID: #{p.project_pid}".colorize( :green )
        users = PowerByHelper::Persistent.user_project_data.find_all{|u| u.project_pid == p.project_pid}
        users.each do |user|
          message = "User: #{user.login} - Status: #{user.status} GD Role: #{user.role} Organization Role: #{user.internal_role} Notification Enabled: #{user.notification}  Notification Send: #{user.notification_send}"
          if (user.status == PowerByHelper::UserProjectData.OK)
              puts message.colorize( :light_green )
          elsif (user.status == PowerByHelper::UserProjectData.DISABLED)
              puts message.colorize( :gray )
          else
              puts message.colorize( :red )
          end
        end

      end
      puts "------- USER provisioning part - project -------".colorize(:light_blue )
    end
  end


end


command :update_schedules do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_persistent_storage
    helper.update_schedules
  end


end

command :update_processes do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_persistent_storage
    helper.update_processes
  end


end


command :execute_maql do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'MAQL file path'
  c.flag [:maql]

  c.action do |global_options,options,args|

    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_maintenance_storage
    helper.execute_maql(options[:maql])
  end


end


command :execute_partial_metadata do |c|

  c.desc 'Config file path'
  c.flag [:config]

  c.desc 'Partial metadata export token'
  c.flag [:token]

  c.action do |global_options,options,args|
    config_file = options[:config]
    fail "Please provide link to config file" unless (File.exist?(config_file))
    helper = PowerByHelper::Pwb.new(config_file,options[:test])
    helper.gooddata_login
    helper.init_maintenance_storage
    helper.execute_partial_metadata(options[:token])
  end


end

on_error do |exception|
  @@log.error exception.backtrace
  FileUtils.rm_f('running.pid')
  if exception.is_a?(SystemExit) && exception.status == 0
    false
  else
    @@log.error exception.inspect
    false
  end
end

exit run(ARGV)


